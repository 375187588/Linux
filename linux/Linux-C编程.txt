//CentOS 控制终端命令
如何进入Linux下的root目录：


[coder@localhost tmp]$ cd ctest
[coder@localhost ctest]$ vi helloworld.c
[coder@localhost ctest]$ vi Makefile
[coder@localhost ctest]$ ls
helloworld.c  Makefile
[coder@localhost ctest]$ make
gcc -o helloworld.o -c helloworld.c
gcc -o hello helloworld.o
[coder@localhost ctest]$ ls
hello  helloworld.c  helloworld.o  Makefile
[coder@localhost ctest]$ ./hello
hello world
[coder@localhost ctest]$ make clean
rm hello helloworld.o
[coder@localhost ctest]$ ls
helloworld.c  Makefile
[coder@localhost ctest]$ 

//vim 编写的 helloworld.c
#include <stdio.h>
int main()
{
        printf("hello world\n");
        return 0;
}


//vim 编写 Makefile
hello:helloworld.o
        gcc -o hello helloworld.o
helloworld.o:helloworld.c
        gcc -o helloworld.o -c helloworld.c
clean:
        rm hello helloworld.o   

//安装
yum install gcc-c++

//如何切换到root用户
在终端输入 su root,然后输入密码即可


/////////////////////////////////////////////////////////////////////
g++编译c++11
//g++ 编译C++
g++ -o hello hello.cpp -std=c++11



g++ -o hello hello.cpp -std=c++11

#include <iostream>
#include <vector>
#include <stdio.h>
using namespace std;

int main()
{
        std::vector<int> v;
        v.push_back(11);
        v.push_back(22);
        v.push_back(33);
        auto it = v.begin();
        while(it != v.end())
        {
        //      std::cout << "c++:" << it << std::endl;
                std::cout << std::endl;
                std::cout << *it;
                std::cout << "c++11:" << *it << std::endl;
                printf("id:%d\n",*it);
                it++;
        }
        return 0;
}


/////////////////////////////////////////////////////////////////////
//多个文件g++命令编译
g++ -o hello hello.cpp Bird.h Animation.h -std=c++11


//Anmation.h 动物类抽象
#include <string>

class CAnimation
{
public:
        CAnimation(const std::string& strName)
        {
                m_strName = strName;
        }
        virtual ~CAnimation()
        {
        }

public:
        virtual std::string GetName() = 0;
        virtual void SetName(std::string& strName) = 0;

protected:
        std::string m_strName;
};


//Bird.h 飞鸟类
include "Animation.h"

class CBird : public CAnimation
{
public:
        CBird(const std::string& strName):
                CAnimation(strName)
        {
        }

        std::string GetName()
        {
                return m_strName;
        }

        void SetName(std::string& strName)
        {
                m_strName = strName;
        }
};

//main
#include <iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include "Bird.h"

using namespace std;

int main()
{
        std::vector<int> v;
        v.push_back(11);
        v.push_back(22);
        v.push_back(33);
        auto it = v.begin();
        while(it != v.end())
        {
        //      std::cout << "c++:" << it << std::endl;
                std::cout << std::endl;
                std::cout << *it;
                std::cout << "c++11:" << *it << std::endl;
                printf("id:%d\n",*it);
                it++;
 	}
        CAnimation* p=new CBird("fly bird");
        std::cout << "animation :" << p->GetName() << std::endl;
        return 0;
}

cd /home/coder/Linux


